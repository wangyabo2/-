#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>

#define MAX_NODES 1000
#define MAX_EDGES 5000

typedef struct {
    int nodeID;
    bool activated;
} Node;

typedef struct {
    int source;
    int target;
} Edge;

Node nodes[MAX_NODES];
Edge edges[MAX_EDGES];
int numNodes = 0;
int numEdges = 0;

void initializeNetwork() {
    // 初始化网络，包括节点和边的信息
    // 在这里可以根据实际情况进行初始化
    // 例如，从文件中读取节点和边的信息
    // 并将其存储在nodes和edges数组中
    // 设置节点的初始激活状态为false
    // 更新numNodes和numEdges的值
    numNodes = 10;
    numEdges = 15;

    // 初始化节点
    for (int i = 0; i < numNodes; i++) {
        nodes[i].nodeID = i;
        nodes[i].activated = false;
    }

    // 初始化边
    edges[0].source = 0;
    edges[0].target = 1;
    edges[1].source = 0;
    edges[1].target = 2;
    edges[2].source = 1;
    edges[2].target = 3;
    edges[3].source = 1;
    edges[3].target = 4;
    edges[4].source = 2;
    edges[4].target = 3;
    edges[5].source = 2;
    edges[5].target = 5;
    edges[6].source = 3;
    edges[6].target = 6;
    edges[7].source = 4;
    edges[7].target = 7;
    edges[8].source = 5;
    edges[8].target = 6;
    edges[9].source = 5;
    edges[9].target = 8;
    edges[10].source = 6;
    edges[10].target = 9;
    edges[11].source = 7;
    edges[11].target = 9;
    edges[12].source = 8;
    edges[12].target = 9;
    edges[13].source = 8;
    edges[13].target = 7;
    edges[14].source = 9;
    edges[14].target = 7;
}

void activateSeedNodes(int seedNodes[], int numSeedNodes) {
    // 激活种子节点
    for (int i = 0; i < numSeedNodes; i++) {
        int nodeID = seedNodes[i];
        nodes[nodeID].activated = true;
    }
}

bool isNodeActivated(int nodeID) {
    // 检查节点是否已被激活
    return nodes[nodeID].activated;
}

void calculateActivationProbabilities() {
    // 计算每个节点的激活概率
    // 在这里可以使用某种算法或模型来计算激活概率
    // 可以基于节点的度中心性或其他指标进行估计
    // 这里假设所有节点的激活概率都为0.5
}

bool tryActivateNode(int nodeID) {
    // 尝试激活节点
    // 生成一个随机概率值
    // 如果激活概率大于等于随机值，则激活节点
    // 返回true表示成功激活节点，否则返回false
    double activationProbability = 0.5; // 假设节点的激活概率为0.5
    double randomValue = (double)rand() / RAND_MAX; // 生成随机概率值

    if (activationProbability >= randomValue) {
        nodes[nodeID].activated = true;
        return true;
    }

    return false;
}

void independentCascadeModel(int seedNodes[], int numSeedNodes) {
    activateSeedNodes(seedNodes, numSeedNodes);

    while (true) {
        bool activatedNodeFound = false;

        for (int i = 0; i < numEdges; i++) {
            int sourceNodeID = edges[i].source;
            int targetNodeID = edges[i].target;

            if (isNodeActivated(sourceNodeID) && !isNodeActivated(targetNodeID)) {
                if (tryActivateNode(targetNodeID)) {
                    activatedNodeFound = true;
                }
            }
        }

        if (!activatedNodeFound) {
            break;
        }
    }
}

int countActivatedNodes() {
    int activatedCount = 0;

    for (int i = 0; i < numNodes; i++) {
        if (nodes[i].activated) {
            activatedCount++;
        }
    }

    return activatedCount;
}

int main() {
    srand(time(NULL));

    initializeNetwork();

    int seedNodes[] = {0, 1, 2}; // 设置种子节点
    int numSeedNodes = sizeof(seedNodes) / sizeof(seedNodes[0]);

    independentCascadeModel(seedNodes, numSeedNodes);

    int activatedCount = countActivatedNodes();

    printf("Activated nodes: %d\n", activatedCount);

    return 0;
}
